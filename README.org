* json-streams

A Common Lisp library for reading and writing JSON.

- No dependencies.
- Unambiguous mapping of datatypes between lisp and JSON.
- Easy to use streaming API.
- Validates input and output.
- Designed to be a building block for more high level libraries.
- Streaming design, can proccess JSON text of unlimted size.

There is already many JSON libraries for Common Lisp.  None of these
libraries ca nbe said to be best, they all have their strengths and
weaknesses.  Much of the problem lies in the fact that there is a bit
of disparaty between JSON datatypes and Common Lisp datatypes.  This
library is therefore designed to used as a building block for more
high level JSON libraries.  The library takes of boring syntactic
details and error checking.


** High level interface

The high level interface uses the following datatype mapping:

| JSON   | Common Lisp                            |
|--------+----------------------------------------|
| true   | T                                      |
| false  | NIL                                    |
| null   | :NULL                                  |
| string | string                                 |
| number | integer, ratio and float (output only) |
| array  | vector                                 |
| object | hash-table with keys as strings        |

Function
JSON-STREAMS:JSON-PARSE source &key max-exponent

Parses JSON text from source, either a character stream or a string.

Function
JSON-STREAMS:JSON-PARSE-MULTIPLE source &key max-exponent

Parses zero or more JSON texts from source. Returns a list.

Function
JSON-STREAMS:JSON-STRINGIFY value &optional target &rest options

Stringifies value into JSON text. If target is not provided or NIL,
returns a string with the JSON text. Otherwise target must be a
character stream.


** The streaming interface

The high level interface is built on top the streaming interafce.  See
parse.lisp and stringify.lisp for example of how to use this
interface.

Function
JSON-STREAMS:MAKE-JSON-INPUT-STREAM source &key start end close-stream multiple duplicate-key-check use-ratios max-exponent raw-strings

- source - A character stream or a string. When source is a string,
  start and end are bounding index designators of string.
- use-ratios - Default NIL.  When false, numbers that are not integers
  are returned as double-floats.  Then true, these numbers are
  returned as ratios.  Please note that numbers such as 2.0 are always
  returned as the integer 2.
- max-exponent - Default 325.  The maximum (positive and negative)
  exponent accepted in numbers.
- raw-strings - Default NIL.  When true, strings are returned as
  lists of numbers, representing unicode code points.  For unicode
  escape sequences in strings (\uXXXX), no UTF-16 validation or decoding
  is done.

Function
JSON-STREAMS:MAKE-JSON-OUTPUT-STREAM stream &key close-stream multiple duplicate-key-check indent escape-non-ascii

- stream - A character stream.
- indent - Default NIL.  When true, the JSON text is broken into lines
  and indented.
- escape-non-ascii - Default NIL. When true, any character outside the
  ASCII character set will be escaped using the \uXXXX syntax.

Common options:

- close-stream - Default NIL.  When T, the source stream will be
  closed by JSON-CLOSE.
- multiple - Default NIL.  When NIL, only a single JSON text (object or
  array) is expected in the stream.  When T, zero or more JSON texts
  can be read from or written to stream.
- duplicate-key-check - Default T.  When true, an error will be
  signaled when duplicate keys are detected in an object.  Setting
  this to NIL avoids the added overhead of checking for duplicate keys.

Function
JSON-STREAMS:JSON-READ json-input-stream

Parses JSON text from the underlying stream and returns the next
token.

Function
JSON-STREAMS:JSON-WRITE token json-output-stream

Outputs JSON text to underlying stream based on the given token.


The possible tokens for input and output are

- :BEGIN-OBJECT
- :END-OBJECT
- :BEGIN-ARRAY
- :END-ARRAY
- :NULL
- :FALSE
- :TRUE
- A number
- A string
- A list of integers
- :EOF

After a :BEGIN-OBJECT is returned, JSON-READ will alternate between
returning keys and values of the object, until :END-OBJECT is returned
instead of a key.  Keys are always returned as strings.  Values can be
anything, except :END-OBJECT, :END-ARRAY and :EOF.  Thus some kind of
recursive or stack based algorithm is neccearry.

